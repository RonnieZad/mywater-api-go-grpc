// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.24.4
// source: pkg/application/pb/application.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ApplicationServiceClient is the client API for ApplicationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ApplicationServiceClient interface {
	AddLabelAdvert(ctx context.Context, in *AddLabelAdvertRequest, opts ...grpc.CallOption) (*AddLabelAdvertResponse, error)
	AddLabelScan(ctx context.Context, in *AddLabelScanRequest, opts ...grpc.CallOption) (*AddLabelScanResponse, error)
	GetUserLabelScan(ctx context.Context, in *GetUserLabelScanRequest, opts ...grpc.CallOption) (*GetUserLabelScanResponse, error)
	GetUserLabelAdvert(ctx context.Context, in *GetUserLabelAdvertRequest, opts ...grpc.CallOption) (*GetUserLabelAdvertResponse, error)
	GetCompanyDashboardAnalytic(ctx context.Context, in *GetCompanyDashboardAnalyticRequest, opts ...grpc.CallOption) (*GetCompanyDashboardAnalyticResponse, error)
}

type applicationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewApplicationServiceClient(cc grpc.ClientConnInterface) ApplicationServiceClient {
	return &applicationServiceClient{cc}
}

func (c *applicationServiceClient) AddLabelAdvert(ctx context.Context, in *AddLabelAdvertRequest, opts ...grpc.CallOption) (*AddLabelAdvertResponse, error) {
	out := new(AddLabelAdvertResponse)
	err := c.cc.Invoke(ctx, "/application.ApplicationService/AddLabelAdvert", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationServiceClient) AddLabelScan(ctx context.Context, in *AddLabelScanRequest, opts ...grpc.CallOption) (*AddLabelScanResponse, error) {
	out := new(AddLabelScanResponse)
	err := c.cc.Invoke(ctx, "/application.ApplicationService/AddLabelScan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationServiceClient) GetUserLabelScan(ctx context.Context, in *GetUserLabelScanRequest, opts ...grpc.CallOption) (*GetUserLabelScanResponse, error) {
	out := new(GetUserLabelScanResponse)
	err := c.cc.Invoke(ctx, "/application.ApplicationService/GetUserLabelScan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationServiceClient) GetUserLabelAdvert(ctx context.Context, in *GetUserLabelAdvertRequest, opts ...grpc.CallOption) (*GetUserLabelAdvertResponse, error) {
	out := new(GetUserLabelAdvertResponse)
	err := c.cc.Invoke(ctx, "/application.ApplicationService/GetUserLabelAdvert", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationServiceClient) GetCompanyDashboardAnalytic(ctx context.Context, in *GetCompanyDashboardAnalyticRequest, opts ...grpc.CallOption) (*GetCompanyDashboardAnalyticResponse, error) {
	out := new(GetCompanyDashboardAnalyticResponse)
	err := c.cc.Invoke(ctx, "/application.ApplicationService/GetCompanyDashboardAnalytic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ApplicationServiceServer is the server API for ApplicationService service.
// All implementations must embed UnimplementedApplicationServiceServer
// for forward compatibility
type ApplicationServiceServer interface {
	AddLabelAdvert(context.Context, *AddLabelAdvertRequest) (*AddLabelAdvertResponse, error)
	AddLabelScan(context.Context, *AddLabelScanRequest) (*AddLabelScanResponse, error)
	GetUserLabelScan(context.Context, *GetUserLabelScanRequest) (*GetUserLabelScanResponse, error)
	GetUserLabelAdvert(context.Context, *GetUserLabelAdvertRequest) (*GetUserLabelAdvertResponse, error)
	GetCompanyDashboardAnalytic(context.Context, *GetCompanyDashboardAnalyticRequest) (*GetCompanyDashboardAnalyticResponse, error)
	mustEmbedUnimplementedApplicationServiceServer()
}

// UnimplementedApplicationServiceServer must be embedded to have forward compatible implementations.
type UnimplementedApplicationServiceServer struct {
}

func (UnimplementedApplicationServiceServer) AddLabelAdvert(context.Context, *AddLabelAdvertRequest) (*AddLabelAdvertResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddLabelAdvert not implemented")
}
func (UnimplementedApplicationServiceServer) AddLabelScan(context.Context, *AddLabelScanRequest) (*AddLabelScanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddLabelScan not implemented")
}
func (UnimplementedApplicationServiceServer) GetUserLabelScan(context.Context, *GetUserLabelScanRequest) (*GetUserLabelScanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserLabelScan not implemented")
}
func (UnimplementedApplicationServiceServer) GetUserLabelAdvert(context.Context, *GetUserLabelAdvertRequest) (*GetUserLabelAdvertResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserLabelAdvert not implemented")
}
func (UnimplementedApplicationServiceServer) GetCompanyDashboardAnalytic(context.Context, *GetCompanyDashboardAnalyticRequest) (*GetCompanyDashboardAnalyticResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCompanyDashboardAnalytic not implemented")
}
func (UnimplementedApplicationServiceServer) mustEmbedUnimplementedApplicationServiceServer() {}

// UnsafeApplicationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ApplicationServiceServer will
// result in compilation errors.
type UnsafeApplicationServiceServer interface {
	mustEmbedUnimplementedApplicationServiceServer()
}

func RegisterApplicationServiceServer(s grpc.ServiceRegistrar, srv ApplicationServiceServer) {
	s.RegisterService(&ApplicationService_ServiceDesc, srv)
}

func _ApplicationService_AddLabelAdvert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddLabelAdvertRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationServiceServer).AddLabelAdvert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/application.ApplicationService/AddLabelAdvert",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationServiceServer).AddLabelAdvert(ctx, req.(*AddLabelAdvertRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationService_AddLabelScan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddLabelScanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationServiceServer).AddLabelScan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/application.ApplicationService/AddLabelScan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationServiceServer).AddLabelScan(ctx, req.(*AddLabelScanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationService_GetUserLabelScan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserLabelScanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationServiceServer).GetUserLabelScan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/application.ApplicationService/GetUserLabelScan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationServiceServer).GetUserLabelScan(ctx, req.(*GetUserLabelScanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationService_GetUserLabelAdvert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserLabelAdvertRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationServiceServer).GetUserLabelAdvert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/application.ApplicationService/GetUserLabelAdvert",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationServiceServer).GetUserLabelAdvert(ctx, req.(*GetUserLabelAdvertRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationService_GetCompanyDashboardAnalytic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCompanyDashboardAnalyticRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationServiceServer).GetCompanyDashboardAnalytic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/application.ApplicationService/GetCompanyDashboardAnalytic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationServiceServer).GetCompanyDashboardAnalytic(ctx, req.(*GetCompanyDashboardAnalyticRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ApplicationService_ServiceDesc is the grpc.ServiceDesc for ApplicationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ApplicationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "application.ApplicationService",
	HandlerType: (*ApplicationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddLabelAdvert",
			Handler:    _ApplicationService_AddLabelAdvert_Handler,
		},
		{
			MethodName: "AddLabelScan",
			Handler:    _ApplicationService_AddLabelScan_Handler,
		},
		{
			MethodName: "GetUserLabelScan",
			Handler:    _ApplicationService_GetUserLabelScan_Handler,
		},
		{
			MethodName: "GetUserLabelAdvert",
			Handler:    _ApplicationService_GetUserLabelAdvert_Handler,
		},
		{
			MethodName: "GetCompanyDashboardAnalytic",
			Handler:    _ApplicationService_GetCompanyDashboardAnalytic_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/application/pb/application.proto",
}
