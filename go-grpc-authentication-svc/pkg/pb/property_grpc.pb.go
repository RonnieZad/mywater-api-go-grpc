// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.24.4
// source: pkg/pb/property.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PropertyServiceClient is the client API for PropertyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PropertyServiceClient interface {
	AddProperty(ctx context.Context, in *AddPropertyRequest, opts ...grpc.CallOption) (*AddPropertyResponse, error)
	ListProperty(ctx context.Context, in *ListPropertyRequest, opts ...grpc.CallOption) (*ListPropertyResponse, error)
	FindOne(ctx context.Context, in *FindOneRequest, opts ...grpc.CallOption) (*FindOneResponse, error)
	AddUserPropertyPreference(ctx context.Context, in *AddUserPropertyPreferenceRequest, opts ...grpc.CallOption) (*AddUserPropertyPreferenceResponse, error)
	AddUserSavedProperty(ctx context.Context, in *AddUserSavedPropertyRequest, opts ...grpc.CallOption) (*AddUserSavedPropertyResponse, error)
	GetUserSavedProperties(ctx context.Context, in *GetUserSavedPropertiesRequest, opts ...grpc.CallOption) (*GetUserSavedPropertiesResponse, error)
	HoldProperty(ctx context.Context, in *HoldPropertyRequest, opts ...grpc.CallOption) (*HoldPropertyResponse, error)
	SearchProperty(ctx context.Context, in *SearchPropertyRequest, opts ...grpc.CallOption) (*SearchPropertyResponse, error)
	GetPropertyCapacity(ctx context.Context, in *GetPropertyCapacityRequest, opts ...grpc.CallOption) (*GetPropertyCapacityResponse, error)
	GetAllAvailableLocations(ctx context.Context, in *GetAllAvailableLocationsRequest, opts ...grpc.CallOption) (*GetAllAvailableLocationsResponse, error)
	DeleteProperty(ctx context.Context, in *DeletePropertyRequest, opts ...grpc.CallOption) (*DeletePropertyResponse, error)
	DeletePropertyHeld(ctx context.Context, in *DeletePropertyHeldRequest, opts ...grpc.CallOption) (*DeletePropertyHeldResponse, error)
	DeleteUserPropertyPreference(ctx context.Context, in *DeleteUserPropertyPreferenceRequest, opts ...grpc.CallOption) (*DeleteUserPropertyPreferenceResponse, error)
}

type propertyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPropertyServiceClient(cc grpc.ClientConnInterface) PropertyServiceClient {
	return &propertyServiceClient{cc}
}

func (c *propertyServiceClient) AddProperty(ctx context.Context, in *AddPropertyRequest, opts ...grpc.CallOption) (*AddPropertyResponse, error) {
	out := new(AddPropertyResponse)
	err := c.cc.Invoke(ctx, "/property.PropertyService/AddProperty", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *propertyServiceClient) ListProperty(ctx context.Context, in *ListPropertyRequest, opts ...grpc.CallOption) (*ListPropertyResponse, error) {
	out := new(ListPropertyResponse)
	err := c.cc.Invoke(ctx, "/property.PropertyService/ListProperty", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *propertyServiceClient) FindOne(ctx context.Context, in *FindOneRequest, opts ...grpc.CallOption) (*FindOneResponse, error) {
	out := new(FindOneResponse)
	err := c.cc.Invoke(ctx, "/property.PropertyService/FindOne", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *propertyServiceClient) AddUserPropertyPreference(ctx context.Context, in *AddUserPropertyPreferenceRequest, opts ...grpc.CallOption) (*AddUserPropertyPreferenceResponse, error) {
	out := new(AddUserPropertyPreferenceResponse)
	err := c.cc.Invoke(ctx, "/property.PropertyService/AddUserPropertyPreference", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *propertyServiceClient) AddUserSavedProperty(ctx context.Context, in *AddUserSavedPropertyRequest, opts ...grpc.CallOption) (*AddUserSavedPropertyResponse, error) {
	out := new(AddUserSavedPropertyResponse)
	err := c.cc.Invoke(ctx, "/property.PropertyService/AddUserSavedProperty", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *propertyServiceClient) GetUserSavedProperties(ctx context.Context, in *GetUserSavedPropertiesRequest, opts ...grpc.CallOption) (*GetUserSavedPropertiesResponse, error) {
	out := new(GetUserSavedPropertiesResponse)
	err := c.cc.Invoke(ctx, "/property.PropertyService/GetUserSavedProperties", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *propertyServiceClient) HoldProperty(ctx context.Context, in *HoldPropertyRequest, opts ...grpc.CallOption) (*HoldPropertyResponse, error) {
	out := new(HoldPropertyResponse)
	err := c.cc.Invoke(ctx, "/property.PropertyService/HoldProperty", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *propertyServiceClient) SearchProperty(ctx context.Context, in *SearchPropertyRequest, opts ...grpc.CallOption) (*SearchPropertyResponse, error) {
	out := new(SearchPropertyResponse)
	err := c.cc.Invoke(ctx, "/property.PropertyService/SearchProperty", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *propertyServiceClient) GetPropertyCapacity(ctx context.Context, in *GetPropertyCapacityRequest, opts ...grpc.CallOption) (*GetPropertyCapacityResponse, error) {
	out := new(GetPropertyCapacityResponse)
	err := c.cc.Invoke(ctx, "/property.PropertyService/GetPropertyCapacity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *propertyServiceClient) GetAllAvailableLocations(ctx context.Context, in *GetAllAvailableLocationsRequest, opts ...grpc.CallOption) (*GetAllAvailableLocationsResponse, error) {
	out := new(GetAllAvailableLocationsResponse)
	err := c.cc.Invoke(ctx, "/property.PropertyService/GetAllAvailableLocations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *propertyServiceClient) DeleteProperty(ctx context.Context, in *DeletePropertyRequest, opts ...grpc.CallOption) (*DeletePropertyResponse, error) {
	out := new(DeletePropertyResponse)
	err := c.cc.Invoke(ctx, "/property.PropertyService/DeleteProperty", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *propertyServiceClient) DeletePropertyHeld(ctx context.Context, in *DeletePropertyHeldRequest, opts ...grpc.CallOption) (*DeletePropertyHeldResponse, error) {
	out := new(DeletePropertyHeldResponse)
	err := c.cc.Invoke(ctx, "/property.PropertyService/DeletePropertyHeld", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *propertyServiceClient) DeleteUserPropertyPreference(ctx context.Context, in *DeleteUserPropertyPreferenceRequest, opts ...grpc.CallOption) (*DeleteUserPropertyPreferenceResponse, error) {
	out := new(DeleteUserPropertyPreferenceResponse)
	err := c.cc.Invoke(ctx, "/property.PropertyService/DeleteUserPropertyPreference", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PropertyServiceServer is the server API for PropertyService service.
// All implementations must embed UnimplementedPropertyServiceServer
// for forward compatibility
type PropertyServiceServer interface {
	AddProperty(context.Context, *AddPropertyRequest) (*AddPropertyResponse, error)
	ListProperty(context.Context, *ListPropertyRequest) (*ListPropertyResponse, error)
	FindOne(context.Context, *FindOneRequest) (*FindOneResponse, error)
	AddUserPropertyPreference(context.Context, *AddUserPropertyPreferenceRequest) (*AddUserPropertyPreferenceResponse, error)
	AddUserSavedProperty(context.Context, *AddUserSavedPropertyRequest) (*AddUserSavedPropertyResponse, error)
	GetUserSavedProperties(context.Context, *GetUserSavedPropertiesRequest) (*GetUserSavedPropertiesResponse, error)
	HoldProperty(context.Context, *HoldPropertyRequest) (*HoldPropertyResponse, error)
	SearchProperty(context.Context, *SearchPropertyRequest) (*SearchPropertyResponse, error)
	GetPropertyCapacity(context.Context, *GetPropertyCapacityRequest) (*GetPropertyCapacityResponse, error)
	GetAllAvailableLocations(context.Context, *GetAllAvailableLocationsRequest) (*GetAllAvailableLocationsResponse, error)
	DeleteProperty(context.Context, *DeletePropertyRequest) (*DeletePropertyResponse, error)
	DeletePropertyHeld(context.Context, *DeletePropertyHeldRequest) (*DeletePropertyHeldResponse, error)
	DeleteUserPropertyPreference(context.Context, *DeleteUserPropertyPreferenceRequest) (*DeleteUserPropertyPreferenceResponse, error)
	mustEmbedUnimplementedPropertyServiceServer()
}

// UnimplementedPropertyServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPropertyServiceServer struct {
}

func (UnimplementedPropertyServiceServer) AddProperty(context.Context, *AddPropertyRequest) (*AddPropertyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddProperty not implemented")
}
func (UnimplementedPropertyServiceServer) ListProperty(context.Context, *ListPropertyRequest) (*ListPropertyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProperty not implemented")
}
func (UnimplementedPropertyServiceServer) FindOne(context.Context, *FindOneRequest) (*FindOneResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindOne not implemented")
}
func (UnimplementedPropertyServiceServer) AddUserPropertyPreference(context.Context, *AddUserPropertyPreferenceRequest) (*AddUserPropertyPreferenceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUserPropertyPreference not implemented")
}
func (UnimplementedPropertyServiceServer) AddUserSavedProperty(context.Context, *AddUserSavedPropertyRequest) (*AddUserSavedPropertyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUserSavedProperty not implemented")
}
func (UnimplementedPropertyServiceServer) GetUserSavedProperties(context.Context, *GetUserSavedPropertiesRequest) (*GetUserSavedPropertiesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserSavedProperties not implemented")
}
func (UnimplementedPropertyServiceServer) HoldProperty(context.Context, *HoldPropertyRequest) (*HoldPropertyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HoldProperty not implemented")
}
func (UnimplementedPropertyServiceServer) SearchProperty(context.Context, *SearchPropertyRequest) (*SearchPropertyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchProperty not implemented")
}
func (UnimplementedPropertyServiceServer) GetPropertyCapacity(context.Context, *GetPropertyCapacityRequest) (*GetPropertyCapacityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPropertyCapacity not implemented")
}
func (UnimplementedPropertyServiceServer) GetAllAvailableLocations(context.Context, *GetAllAvailableLocationsRequest) (*GetAllAvailableLocationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllAvailableLocations not implemented")
}
func (UnimplementedPropertyServiceServer) DeleteProperty(context.Context, *DeletePropertyRequest) (*DeletePropertyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProperty not implemented")
}
func (UnimplementedPropertyServiceServer) DeletePropertyHeld(context.Context, *DeletePropertyHeldRequest) (*DeletePropertyHeldResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePropertyHeld not implemented")
}
func (UnimplementedPropertyServiceServer) DeleteUserPropertyPreference(context.Context, *DeleteUserPropertyPreferenceRequest) (*DeleteUserPropertyPreferenceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUserPropertyPreference not implemented")
}
func (UnimplementedPropertyServiceServer) mustEmbedUnimplementedPropertyServiceServer() {}

// UnsafePropertyServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PropertyServiceServer will
// result in compilation errors.
type UnsafePropertyServiceServer interface {
	mustEmbedUnimplementedPropertyServiceServer()
}

func RegisterPropertyServiceServer(s grpc.ServiceRegistrar, srv PropertyServiceServer) {
	s.RegisterService(&PropertyService_ServiceDesc, srv)
}

func _PropertyService_AddProperty_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddPropertyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PropertyServiceServer).AddProperty(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/property.PropertyService/AddProperty",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PropertyServiceServer).AddProperty(ctx, req.(*AddPropertyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PropertyService_ListProperty_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPropertyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PropertyServiceServer).ListProperty(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/property.PropertyService/ListProperty",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PropertyServiceServer).ListProperty(ctx, req.(*ListPropertyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PropertyService_FindOne_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindOneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PropertyServiceServer).FindOne(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/property.PropertyService/FindOne",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PropertyServiceServer).FindOne(ctx, req.(*FindOneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PropertyService_AddUserPropertyPreference_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddUserPropertyPreferenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PropertyServiceServer).AddUserPropertyPreference(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/property.PropertyService/AddUserPropertyPreference",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PropertyServiceServer).AddUserPropertyPreference(ctx, req.(*AddUserPropertyPreferenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PropertyService_AddUserSavedProperty_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddUserSavedPropertyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PropertyServiceServer).AddUserSavedProperty(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/property.PropertyService/AddUserSavedProperty",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PropertyServiceServer).AddUserSavedProperty(ctx, req.(*AddUserSavedPropertyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PropertyService_GetUserSavedProperties_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserSavedPropertiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PropertyServiceServer).GetUserSavedProperties(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/property.PropertyService/GetUserSavedProperties",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PropertyServiceServer).GetUserSavedProperties(ctx, req.(*GetUserSavedPropertiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PropertyService_HoldProperty_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HoldPropertyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PropertyServiceServer).HoldProperty(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/property.PropertyService/HoldProperty",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PropertyServiceServer).HoldProperty(ctx, req.(*HoldPropertyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PropertyService_SearchProperty_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchPropertyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PropertyServiceServer).SearchProperty(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/property.PropertyService/SearchProperty",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PropertyServiceServer).SearchProperty(ctx, req.(*SearchPropertyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PropertyService_GetPropertyCapacity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPropertyCapacityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PropertyServiceServer).GetPropertyCapacity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/property.PropertyService/GetPropertyCapacity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PropertyServiceServer).GetPropertyCapacity(ctx, req.(*GetPropertyCapacityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PropertyService_GetAllAvailableLocations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllAvailableLocationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PropertyServiceServer).GetAllAvailableLocations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/property.PropertyService/GetAllAvailableLocations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PropertyServiceServer).GetAllAvailableLocations(ctx, req.(*GetAllAvailableLocationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PropertyService_DeleteProperty_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePropertyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PropertyServiceServer).DeleteProperty(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/property.PropertyService/DeleteProperty",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PropertyServiceServer).DeleteProperty(ctx, req.(*DeletePropertyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PropertyService_DeletePropertyHeld_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePropertyHeldRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PropertyServiceServer).DeletePropertyHeld(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/property.PropertyService/DeletePropertyHeld",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PropertyServiceServer).DeletePropertyHeld(ctx, req.(*DeletePropertyHeldRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PropertyService_DeleteUserPropertyPreference_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserPropertyPreferenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PropertyServiceServer).DeleteUserPropertyPreference(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/property.PropertyService/DeleteUserPropertyPreference",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PropertyServiceServer).DeleteUserPropertyPreference(ctx, req.(*DeleteUserPropertyPreferenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PropertyService_ServiceDesc is the grpc.ServiceDesc for PropertyService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PropertyService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "property.PropertyService",
	HandlerType: (*PropertyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddProperty",
			Handler:    _PropertyService_AddProperty_Handler,
		},
		{
			MethodName: "ListProperty",
			Handler:    _PropertyService_ListProperty_Handler,
		},
		{
			MethodName: "FindOne",
			Handler:    _PropertyService_FindOne_Handler,
		},
		{
			MethodName: "AddUserPropertyPreference",
			Handler:    _PropertyService_AddUserPropertyPreference_Handler,
		},
		{
			MethodName: "AddUserSavedProperty",
			Handler:    _PropertyService_AddUserSavedProperty_Handler,
		},
		{
			MethodName: "GetUserSavedProperties",
			Handler:    _PropertyService_GetUserSavedProperties_Handler,
		},
		{
			MethodName: "HoldProperty",
			Handler:    _PropertyService_HoldProperty_Handler,
		},
		{
			MethodName: "SearchProperty",
			Handler:    _PropertyService_SearchProperty_Handler,
		},
		{
			MethodName: "GetPropertyCapacity",
			Handler:    _PropertyService_GetPropertyCapacity_Handler,
		},
		{
			MethodName: "GetAllAvailableLocations",
			Handler:    _PropertyService_GetAllAvailableLocations_Handler,
		},
		{
			MethodName: "DeleteProperty",
			Handler:    _PropertyService_DeleteProperty_Handler,
		},
		{
			MethodName: "DeletePropertyHeld",
			Handler:    _PropertyService_DeletePropertyHeld_Handler,
		},
		{
			MethodName: "DeleteUserPropertyPreference",
			Handler:    _PropertyService_DeleteUserPropertyPreference_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/pb/property.proto",
}
