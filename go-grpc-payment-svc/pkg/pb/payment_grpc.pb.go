// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.24.4
// source: pkg/pb/payment.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PaymentServiceClient is the client API for PaymentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PaymentServiceClient interface {
	MakeCollection(ctx context.Context, in *MakeCollectionRequest, opts ...grpc.CallOption) (*MakeCollectionResponse, error)
	SendPayment(ctx context.Context, in *SendPaymentRequest, opts ...grpc.CallOption) (*SendPaymentResponse, error)
	CollectionCallback(ctx context.Context, in *CollectionCallbackRequest, opts ...grpc.CallOption) (*CollectionCallbackResponse, error)
	PaymentCallback(ctx context.Context, in *PaymentCallbackRequest, opts ...grpc.CallOption) (*PaymentCallbackResponse, error)
	CheckSubscription(ctx context.Context, in *CheckSubscriptionRequest, opts ...grpc.CallOption) (*CheckSubscriptionResponse, error)
	CheckPhoneSubscription(ctx context.Context, in *CheckSubscriptionRequest, opts ...grpc.CallOption) (*CheckSubscriptionResponse, error)
	GetUserNotification(ctx context.Context, in *GetUserNotificationRequest, opts ...grpc.CallOption) (*GetUserNotificationResponse, error)
	GetAllPaymentTransactions(ctx context.Context, in *GetAllPaymentTransactionsRequest, opts ...grpc.CallOption) (*GetAllPaymentTransactionsResponse, error)
	DeletePayment(ctx context.Context, in *DeletePaymentRequest, opts ...grpc.CallOption) (*DeletePaymentResponse, error)
	CheckPropertyHoldSubscription(ctx context.Context, in *CheckPropertyHoldSubscriptionRequest, opts ...grpc.CallOption) (*CheckPropertyHoldSubscriptionResponse, error)
	CheckVoucherValidity(ctx context.Context, in *CheckVoucherValidityRequest, opts ...grpc.CallOption) (*CheckVoucherValidityResponse, error)
	RedeemVoucher(ctx context.Context, in *RedeemVoucherRequest, opts ...grpc.CallOption) (*RedeemVoucherResponse, error)
	AppReferral(ctx context.Context, in *AppReferralRequest, opts ...grpc.CallOption) (*AppReferralResponse, error)
	GetMyAppReferral(ctx context.Context, in *GetMyAppReferralRequest, opts ...grpc.CallOption) (*GetMyAppReferralResponse, error)
	UpdateReferreral(ctx context.Context, in *UpdateReferreralRequest, opts ...grpc.CallOption) (*UpdateReferreralResponse, error)
	StreamNewPaymentNotifications(ctx context.Context, opts ...grpc.CallOption) (PaymentService_StreamNewPaymentNotificationsClient, error)
	GetDashboardMetrics(ctx context.Context, in *GetDashboardMetricsRequest, opts ...grpc.CallOption) (*GetDashboardMetricsResponse, error)
	AddLandlordRevenue(ctx context.Context, in *AddLandlordRevenueRequest, opts ...grpc.CallOption) (*AddLandlordRevenueResponse, error)
	GetLandlordRevenue(ctx context.Context, in *GetLandlordRevenueRequest, opts ...grpc.CallOption) (*GetLandlordRevenueResponse, error)
}

type paymentServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPaymentServiceClient(cc grpc.ClientConnInterface) PaymentServiceClient {
	return &paymentServiceClient{cc}
}

func (c *paymentServiceClient) MakeCollection(ctx context.Context, in *MakeCollectionRequest, opts ...grpc.CallOption) (*MakeCollectionResponse, error) {
	out := new(MakeCollectionResponse)
	err := c.cc.Invoke(ctx, "/payment.PaymentService/MakeCollection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentServiceClient) SendPayment(ctx context.Context, in *SendPaymentRequest, opts ...grpc.CallOption) (*SendPaymentResponse, error) {
	out := new(SendPaymentResponse)
	err := c.cc.Invoke(ctx, "/payment.PaymentService/SendPayment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentServiceClient) CollectionCallback(ctx context.Context, in *CollectionCallbackRequest, opts ...grpc.CallOption) (*CollectionCallbackResponse, error) {
	out := new(CollectionCallbackResponse)
	err := c.cc.Invoke(ctx, "/payment.PaymentService/CollectionCallback", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentServiceClient) PaymentCallback(ctx context.Context, in *PaymentCallbackRequest, opts ...grpc.CallOption) (*PaymentCallbackResponse, error) {
	out := new(PaymentCallbackResponse)
	err := c.cc.Invoke(ctx, "/payment.PaymentService/PaymentCallback", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentServiceClient) CheckSubscription(ctx context.Context, in *CheckSubscriptionRequest, opts ...grpc.CallOption) (*CheckSubscriptionResponse, error) {
	out := new(CheckSubscriptionResponse)
	err := c.cc.Invoke(ctx, "/payment.PaymentService/CheckSubscription", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentServiceClient) CheckPhoneSubscription(ctx context.Context, in *CheckSubscriptionRequest, opts ...grpc.CallOption) (*CheckSubscriptionResponse, error) {
	out := new(CheckSubscriptionResponse)
	err := c.cc.Invoke(ctx, "/payment.PaymentService/CheckPhoneSubscription", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentServiceClient) GetUserNotification(ctx context.Context, in *GetUserNotificationRequest, opts ...grpc.CallOption) (*GetUserNotificationResponse, error) {
	out := new(GetUserNotificationResponse)
	err := c.cc.Invoke(ctx, "/payment.PaymentService/GetUserNotification", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentServiceClient) GetAllPaymentTransactions(ctx context.Context, in *GetAllPaymentTransactionsRequest, opts ...grpc.CallOption) (*GetAllPaymentTransactionsResponse, error) {
	out := new(GetAllPaymentTransactionsResponse)
	err := c.cc.Invoke(ctx, "/payment.PaymentService/GetAllPaymentTransactions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentServiceClient) DeletePayment(ctx context.Context, in *DeletePaymentRequest, opts ...grpc.CallOption) (*DeletePaymentResponse, error) {
	out := new(DeletePaymentResponse)
	err := c.cc.Invoke(ctx, "/payment.PaymentService/DeletePayment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentServiceClient) CheckPropertyHoldSubscription(ctx context.Context, in *CheckPropertyHoldSubscriptionRequest, opts ...grpc.CallOption) (*CheckPropertyHoldSubscriptionResponse, error) {
	out := new(CheckPropertyHoldSubscriptionResponse)
	err := c.cc.Invoke(ctx, "/payment.PaymentService/CheckPropertyHoldSubscription", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentServiceClient) CheckVoucherValidity(ctx context.Context, in *CheckVoucherValidityRequest, opts ...grpc.CallOption) (*CheckVoucherValidityResponse, error) {
	out := new(CheckVoucherValidityResponse)
	err := c.cc.Invoke(ctx, "/payment.PaymentService/CheckVoucherValidity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentServiceClient) RedeemVoucher(ctx context.Context, in *RedeemVoucherRequest, opts ...grpc.CallOption) (*RedeemVoucherResponse, error) {
	out := new(RedeemVoucherResponse)
	err := c.cc.Invoke(ctx, "/payment.PaymentService/RedeemVoucher", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentServiceClient) AppReferral(ctx context.Context, in *AppReferralRequest, opts ...grpc.CallOption) (*AppReferralResponse, error) {
	out := new(AppReferralResponse)
	err := c.cc.Invoke(ctx, "/payment.PaymentService/AppReferral", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentServiceClient) GetMyAppReferral(ctx context.Context, in *GetMyAppReferralRequest, opts ...grpc.CallOption) (*GetMyAppReferralResponse, error) {
	out := new(GetMyAppReferralResponse)
	err := c.cc.Invoke(ctx, "/payment.PaymentService/GetMyAppReferral", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentServiceClient) UpdateReferreral(ctx context.Context, in *UpdateReferreralRequest, opts ...grpc.CallOption) (*UpdateReferreralResponse, error) {
	out := new(UpdateReferreralResponse)
	err := c.cc.Invoke(ctx, "/payment.PaymentService/UpdateReferreral", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentServiceClient) StreamNewPaymentNotifications(ctx context.Context, opts ...grpc.CallOption) (PaymentService_StreamNewPaymentNotificationsClient, error) {
	stream, err := c.cc.NewStream(ctx, &PaymentService_ServiceDesc.Streams[0], "/payment.PaymentService/StreamNewPaymentNotifications", opts...)
	if err != nil {
		return nil, err
	}
	x := &paymentServiceStreamNewPaymentNotificationsClient{stream}
	return x, nil
}

type PaymentService_StreamNewPaymentNotificationsClient interface {
	Send(*StreamNewPaymentNotificationsRequest) error
	Recv() (*PaymentTransaction, error)
	grpc.ClientStream
}

type paymentServiceStreamNewPaymentNotificationsClient struct {
	grpc.ClientStream
}

func (x *paymentServiceStreamNewPaymentNotificationsClient) Send(m *StreamNewPaymentNotificationsRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *paymentServiceStreamNewPaymentNotificationsClient) Recv() (*PaymentTransaction, error) {
	m := new(PaymentTransaction)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *paymentServiceClient) GetDashboardMetrics(ctx context.Context, in *GetDashboardMetricsRequest, opts ...grpc.CallOption) (*GetDashboardMetricsResponse, error) {
	out := new(GetDashboardMetricsResponse)
	err := c.cc.Invoke(ctx, "/payment.PaymentService/GetDashboardMetrics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentServiceClient) AddLandlordRevenue(ctx context.Context, in *AddLandlordRevenueRequest, opts ...grpc.CallOption) (*AddLandlordRevenueResponse, error) {
	out := new(AddLandlordRevenueResponse)
	err := c.cc.Invoke(ctx, "/payment.PaymentService/AddLandlordRevenue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentServiceClient) GetLandlordRevenue(ctx context.Context, in *GetLandlordRevenueRequest, opts ...grpc.CallOption) (*GetLandlordRevenueResponse, error) {
	out := new(GetLandlordRevenueResponse)
	err := c.cc.Invoke(ctx, "/payment.PaymentService/GetLandlordRevenue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PaymentServiceServer is the server API for PaymentService service.
// All implementations must embed UnimplementedPaymentServiceServer
// for forward compatibility
type PaymentServiceServer interface {
	MakeCollection(context.Context, *MakeCollectionRequest) (*MakeCollectionResponse, error)
	SendPayment(context.Context, *SendPaymentRequest) (*SendPaymentResponse, error)
	CollectionCallback(context.Context, *CollectionCallbackRequest) (*CollectionCallbackResponse, error)
	PaymentCallback(context.Context, *PaymentCallbackRequest) (*PaymentCallbackResponse, error)
	CheckSubscription(context.Context, *CheckSubscriptionRequest) (*CheckSubscriptionResponse, error)
	CheckPhoneSubscription(context.Context, *CheckSubscriptionRequest) (*CheckSubscriptionResponse, error)
	GetUserNotification(context.Context, *GetUserNotificationRequest) (*GetUserNotificationResponse, error)
	GetAllPaymentTransactions(context.Context, *GetAllPaymentTransactionsRequest) (*GetAllPaymentTransactionsResponse, error)
	DeletePayment(context.Context, *DeletePaymentRequest) (*DeletePaymentResponse, error)
	CheckPropertyHoldSubscription(context.Context, *CheckPropertyHoldSubscriptionRequest) (*CheckPropertyHoldSubscriptionResponse, error)
	CheckVoucherValidity(context.Context, *CheckVoucherValidityRequest) (*CheckVoucherValidityResponse, error)
	RedeemVoucher(context.Context, *RedeemVoucherRequest) (*RedeemVoucherResponse, error)
	AppReferral(context.Context, *AppReferralRequest) (*AppReferralResponse, error)
	GetMyAppReferral(context.Context, *GetMyAppReferralRequest) (*GetMyAppReferralResponse, error)
	UpdateReferreral(context.Context, *UpdateReferreralRequest) (*UpdateReferreralResponse, error)
	StreamNewPaymentNotifications(PaymentService_StreamNewPaymentNotificationsServer) error
	GetDashboardMetrics(context.Context, *GetDashboardMetricsRequest) (*GetDashboardMetricsResponse, error)
	AddLandlordRevenue(context.Context, *AddLandlordRevenueRequest) (*AddLandlordRevenueResponse, error)
	GetLandlordRevenue(context.Context, *GetLandlordRevenueRequest) (*GetLandlordRevenueResponse, error)
	mustEmbedUnimplementedPaymentServiceServer()
}

// UnimplementedPaymentServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPaymentServiceServer struct {
}

func (UnimplementedPaymentServiceServer) MakeCollection(context.Context, *MakeCollectionRequest) (*MakeCollectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MakeCollection not implemented")
}
func (UnimplementedPaymentServiceServer) SendPayment(context.Context, *SendPaymentRequest) (*SendPaymentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendPayment not implemented")
}
func (UnimplementedPaymentServiceServer) CollectionCallback(context.Context, *CollectionCallbackRequest) (*CollectionCallbackResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CollectionCallback not implemented")
}
func (UnimplementedPaymentServiceServer) PaymentCallback(context.Context, *PaymentCallbackRequest) (*PaymentCallbackResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PaymentCallback not implemented")
}
func (UnimplementedPaymentServiceServer) CheckSubscription(context.Context, *CheckSubscriptionRequest) (*CheckSubscriptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckSubscription not implemented")
}
func (UnimplementedPaymentServiceServer) CheckPhoneSubscription(context.Context, *CheckSubscriptionRequest) (*CheckSubscriptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckPhoneSubscription not implemented")
}
func (UnimplementedPaymentServiceServer) GetUserNotification(context.Context, *GetUserNotificationRequest) (*GetUserNotificationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserNotification not implemented")
}
func (UnimplementedPaymentServiceServer) GetAllPaymentTransactions(context.Context, *GetAllPaymentTransactionsRequest) (*GetAllPaymentTransactionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllPaymentTransactions not implemented")
}
func (UnimplementedPaymentServiceServer) DeletePayment(context.Context, *DeletePaymentRequest) (*DeletePaymentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePayment not implemented")
}
func (UnimplementedPaymentServiceServer) CheckPropertyHoldSubscription(context.Context, *CheckPropertyHoldSubscriptionRequest) (*CheckPropertyHoldSubscriptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckPropertyHoldSubscription not implemented")
}
func (UnimplementedPaymentServiceServer) CheckVoucherValidity(context.Context, *CheckVoucherValidityRequest) (*CheckVoucherValidityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckVoucherValidity not implemented")
}
func (UnimplementedPaymentServiceServer) RedeemVoucher(context.Context, *RedeemVoucherRequest) (*RedeemVoucherResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RedeemVoucher not implemented")
}
func (UnimplementedPaymentServiceServer) AppReferral(context.Context, *AppReferralRequest) (*AppReferralResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AppReferral not implemented")
}
func (UnimplementedPaymentServiceServer) GetMyAppReferral(context.Context, *GetMyAppReferralRequest) (*GetMyAppReferralResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMyAppReferral not implemented")
}
func (UnimplementedPaymentServiceServer) UpdateReferreral(context.Context, *UpdateReferreralRequest) (*UpdateReferreralResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateReferreral not implemented")
}
func (UnimplementedPaymentServiceServer) StreamNewPaymentNotifications(PaymentService_StreamNewPaymentNotificationsServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamNewPaymentNotifications not implemented")
}
func (UnimplementedPaymentServiceServer) GetDashboardMetrics(context.Context, *GetDashboardMetricsRequest) (*GetDashboardMetricsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDashboardMetrics not implemented")
}
func (UnimplementedPaymentServiceServer) AddLandlordRevenue(context.Context, *AddLandlordRevenueRequest) (*AddLandlordRevenueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddLandlordRevenue not implemented")
}
func (UnimplementedPaymentServiceServer) GetLandlordRevenue(context.Context, *GetLandlordRevenueRequest) (*GetLandlordRevenueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLandlordRevenue not implemented")
}
func (UnimplementedPaymentServiceServer) mustEmbedUnimplementedPaymentServiceServer() {}

// UnsafePaymentServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PaymentServiceServer will
// result in compilation errors.
type UnsafePaymentServiceServer interface {
	mustEmbedUnimplementedPaymentServiceServer()
}

func RegisterPaymentServiceServer(s grpc.ServiceRegistrar, srv PaymentServiceServer) {
	s.RegisterService(&PaymentService_ServiceDesc, srv)
}

func _PaymentService_MakeCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MakeCollectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).MakeCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/payment.PaymentService/MakeCollection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).MakeCollection(ctx, req.(*MakeCollectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentService_SendPayment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendPaymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).SendPayment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/payment.PaymentService/SendPayment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).SendPayment(ctx, req.(*SendPaymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentService_CollectionCallback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CollectionCallbackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).CollectionCallback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/payment.PaymentService/CollectionCallback",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).CollectionCallback(ctx, req.(*CollectionCallbackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentService_PaymentCallback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PaymentCallbackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).PaymentCallback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/payment.PaymentService/PaymentCallback",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).PaymentCallback(ctx, req.(*PaymentCallbackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentService_CheckSubscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckSubscriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).CheckSubscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/payment.PaymentService/CheckSubscription",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).CheckSubscription(ctx, req.(*CheckSubscriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentService_CheckPhoneSubscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckSubscriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).CheckPhoneSubscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/payment.PaymentService/CheckPhoneSubscription",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).CheckPhoneSubscription(ctx, req.(*CheckSubscriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentService_GetUserNotification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserNotificationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).GetUserNotification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/payment.PaymentService/GetUserNotification",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).GetUserNotification(ctx, req.(*GetUserNotificationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentService_GetAllPaymentTransactions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllPaymentTransactionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).GetAllPaymentTransactions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/payment.PaymentService/GetAllPaymentTransactions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).GetAllPaymentTransactions(ctx, req.(*GetAllPaymentTransactionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentService_DeletePayment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePaymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).DeletePayment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/payment.PaymentService/DeletePayment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).DeletePayment(ctx, req.(*DeletePaymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentService_CheckPropertyHoldSubscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckPropertyHoldSubscriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).CheckPropertyHoldSubscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/payment.PaymentService/CheckPropertyHoldSubscription",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).CheckPropertyHoldSubscription(ctx, req.(*CheckPropertyHoldSubscriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentService_CheckVoucherValidity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckVoucherValidityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).CheckVoucherValidity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/payment.PaymentService/CheckVoucherValidity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).CheckVoucherValidity(ctx, req.(*CheckVoucherValidityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentService_RedeemVoucher_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RedeemVoucherRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).RedeemVoucher(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/payment.PaymentService/RedeemVoucher",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).RedeemVoucher(ctx, req.(*RedeemVoucherRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentService_AppReferral_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppReferralRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).AppReferral(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/payment.PaymentService/AppReferral",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).AppReferral(ctx, req.(*AppReferralRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentService_GetMyAppReferral_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMyAppReferralRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).GetMyAppReferral(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/payment.PaymentService/GetMyAppReferral",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).GetMyAppReferral(ctx, req.(*GetMyAppReferralRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentService_UpdateReferreral_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateReferreralRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).UpdateReferreral(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/payment.PaymentService/UpdateReferreral",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).UpdateReferreral(ctx, req.(*UpdateReferreralRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentService_StreamNewPaymentNotifications_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PaymentServiceServer).StreamNewPaymentNotifications(&paymentServiceStreamNewPaymentNotificationsServer{stream})
}

type PaymentService_StreamNewPaymentNotificationsServer interface {
	Send(*PaymentTransaction) error
	Recv() (*StreamNewPaymentNotificationsRequest, error)
	grpc.ServerStream
}

type paymentServiceStreamNewPaymentNotificationsServer struct {
	grpc.ServerStream
}

func (x *paymentServiceStreamNewPaymentNotificationsServer) Send(m *PaymentTransaction) error {
	return x.ServerStream.SendMsg(m)
}

func (x *paymentServiceStreamNewPaymentNotificationsServer) Recv() (*StreamNewPaymentNotificationsRequest, error) {
	m := new(StreamNewPaymentNotificationsRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _PaymentService_GetDashboardMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDashboardMetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).GetDashboardMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/payment.PaymentService/GetDashboardMetrics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).GetDashboardMetrics(ctx, req.(*GetDashboardMetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentService_AddLandlordRevenue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddLandlordRevenueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).AddLandlordRevenue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/payment.PaymentService/AddLandlordRevenue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).AddLandlordRevenue(ctx, req.(*AddLandlordRevenueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentService_GetLandlordRevenue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLandlordRevenueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).GetLandlordRevenue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/payment.PaymentService/GetLandlordRevenue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).GetLandlordRevenue(ctx, req.(*GetLandlordRevenueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PaymentService_ServiceDesc is the grpc.ServiceDesc for PaymentService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PaymentService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "payment.PaymentService",
	HandlerType: (*PaymentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "MakeCollection",
			Handler:    _PaymentService_MakeCollection_Handler,
		},
		{
			MethodName: "SendPayment",
			Handler:    _PaymentService_SendPayment_Handler,
		},
		{
			MethodName: "CollectionCallback",
			Handler:    _PaymentService_CollectionCallback_Handler,
		},
		{
			MethodName: "PaymentCallback",
			Handler:    _PaymentService_PaymentCallback_Handler,
		},
		{
			MethodName: "CheckSubscription",
			Handler:    _PaymentService_CheckSubscription_Handler,
		},
		{
			MethodName: "CheckPhoneSubscription",
			Handler:    _PaymentService_CheckPhoneSubscription_Handler,
		},
		{
			MethodName: "GetUserNotification",
			Handler:    _PaymentService_GetUserNotification_Handler,
		},
		{
			MethodName: "GetAllPaymentTransactions",
			Handler:    _PaymentService_GetAllPaymentTransactions_Handler,
		},
		{
			MethodName: "DeletePayment",
			Handler:    _PaymentService_DeletePayment_Handler,
		},
		{
			MethodName: "CheckPropertyHoldSubscription",
			Handler:    _PaymentService_CheckPropertyHoldSubscription_Handler,
		},
		{
			MethodName: "CheckVoucherValidity",
			Handler:    _PaymentService_CheckVoucherValidity_Handler,
		},
		{
			MethodName: "RedeemVoucher",
			Handler:    _PaymentService_RedeemVoucher_Handler,
		},
		{
			MethodName: "AppReferral",
			Handler:    _PaymentService_AppReferral_Handler,
		},
		{
			MethodName: "GetMyAppReferral",
			Handler:    _PaymentService_GetMyAppReferral_Handler,
		},
		{
			MethodName: "UpdateReferreral",
			Handler:    _PaymentService_UpdateReferreral_Handler,
		},
		{
			MethodName: "GetDashboardMetrics",
			Handler:    _PaymentService_GetDashboardMetrics_Handler,
		},
		{
			MethodName: "AddLandlordRevenue",
			Handler:    _PaymentService_AddLandlordRevenue_Handler,
		},
		{
			MethodName: "GetLandlordRevenue",
			Handler:    _PaymentService_GetLandlordRevenue_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamNewPaymentNotifications",
			Handler:       _PaymentService_StreamNewPaymentNotifications_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "pkg/pb/payment.proto",
}
