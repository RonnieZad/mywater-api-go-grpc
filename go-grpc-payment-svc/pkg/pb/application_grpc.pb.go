// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.24.4
// source: pkg/pb/application.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ApplicationServiceClient is the client API for ApplicationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ApplicationServiceClient interface {
	MakeHouseFinanceApplication(ctx context.Context, in *MakeHouseFinanceApplicationRequest, opts ...grpc.CallOption) (*MakeHouseFinanceApplicationResponse, error)
	ListMakeHouseFinanceApplication(ctx context.Context, in *ListMakeHouseFinanceApplicationRequest, opts ...grpc.CallOption) (*ListMakeHouseFinanceApplicationResponse, error)
	FindOneMakeHouseFinanceApplication(ctx context.Context, in *FindOneMakeHouseFinanceApplicationRequest, opts ...grpc.CallOption) (*FindOneMakeHouseFinanceApplicationResponse, error)
	MakeTourRequestApplication(ctx context.Context, in *MakeTourRequestApplicationRequest, opts ...grpc.CallOption) (*MakeTourRequestApplicationResponse, error)
	RentFinancingRequestApplication(ctx context.Context, in *RentFinancingRequestApplicationRequest, opts ...grpc.CallOption) (*RentFinancingRequestApplicationResponse, error)
	GetUserRentApplication(ctx context.Context, in *GetUserRentApplicationRequest, opts ...grpc.CallOption) (*GetUserRentApplicationResponse, error)
	GetAllUserRentApplications(ctx context.Context, in *GetAllUserRentApplicationsRequest, opts ...grpc.CallOption) (*GetAllUserRentApplicationsResponse, error)
	DeclineRentApplication(ctx context.Context, in *DeclineRentApplicationRequest, opts ...grpc.CallOption) (*DeclineRentApplicationResponse, error)
	ApproveRentApplication(ctx context.Context, in *ApproveRentApplicationRequest, opts ...grpc.CallOption) (*ApproveRentApplicationResponse, error)
	DeleteRentApplication(ctx context.Context, in *DeleteRentApplicationRequest, opts ...grpc.CallOption) (*DeleteRentApplicationResponse, error)
	DeleteTourApplication(ctx context.Context, in *DeleteTourApplicationRequest, opts ...grpc.CallOption) (*DeleteTourApplicationResponse, error)
	UpdateApplicationLandlordPaymentStatus(ctx context.Context, in *UpdateApplicationLandlordPaymentStatusRequest, opts ...grpc.CallOption) (*UpdateApplicationLandlordPaymentStatusResponse, error)
	UpdateApplicationSecurityDepositPaidStatus(ctx context.Context, in *UpdateApplicationSecurityDepositPaidStatusRequest, opts ...grpc.CallOption) (*UpdateApplicationSecurityDepositPaidStatusResponse, error)
	UpdateApplicationRepaymentDetails(ctx context.Context, in *UpdateApplicationRepaymentDetailsRequest, opts ...grpc.CallOption) (*UpdateApplicationRepaymentDetailsResponse, error)
	RoomMateApplication(ctx context.Context, in *RoomMateApplicationRequest, opts ...grpc.CallOption) (*RoomMateApplicationResponse, error)
	RoomMateApplicationUpdate(ctx context.Context, in *RoomMateApplicationUpdateRequest, opts ...grpc.CallOption) (*RoomMateApplicationUpdateResponse, error)
	ManageUserLock(ctx context.Context, in *ManageUserLockRequest, opts ...grpc.CallOption) (*ManageUserLockResponse, error)
	GetApplicationMetrics(ctx context.Context, in *GetApplicationMetricsRequest, opts ...grpc.CallOption) (*GetApplicationMetricsResponse, error)
}

type applicationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewApplicationServiceClient(cc grpc.ClientConnInterface) ApplicationServiceClient {
	return &applicationServiceClient{cc}
}

func (c *applicationServiceClient) MakeHouseFinanceApplication(ctx context.Context, in *MakeHouseFinanceApplicationRequest, opts ...grpc.CallOption) (*MakeHouseFinanceApplicationResponse, error) {
	out := new(MakeHouseFinanceApplicationResponse)
	err := c.cc.Invoke(ctx, "/application.ApplicationService/MakeHouseFinanceApplication", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationServiceClient) ListMakeHouseFinanceApplication(ctx context.Context, in *ListMakeHouseFinanceApplicationRequest, opts ...grpc.CallOption) (*ListMakeHouseFinanceApplicationResponse, error) {
	out := new(ListMakeHouseFinanceApplicationResponse)
	err := c.cc.Invoke(ctx, "/application.ApplicationService/ListMakeHouseFinanceApplication", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationServiceClient) FindOneMakeHouseFinanceApplication(ctx context.Context, in *FindOneMakeHouseFinanceApplicationRequest, opts ...grpc.CallOption) (*FindOneMakeHouseFinanceApplicationResponse, error) {
	out := new(FindOneMakeHouseFinanceApplicationResponse)
	err := c.cc.Invoke(ctx, "/application.ApplicationService/FindOneMakeHouseFinanceApplication", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationServiceClient) MakeTourRequestApplication(ctx context.Context, in *MakeTourRequestApplicationRequest, opts ...grpc.CallOption) (*MakeTourRequestApplicationResponse, error) {
	out := new(MakeTourRequestApplicationResponse)
	err := c.cc.Invoke(ctx, "/application.ApplicationService/MakeTourRequestApplication", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationServiceClient) RentFinancingRequestApplication(ctx context.Context, in *RentFinancingRequestApplicationRequest, opts ...grpc.CallOption) (*RentFinancingRequestApplicationResponse, error) {
	out := new(RentFinancingRequestApplicationResponse)
	err := c.cc.Invoke(ctx, "/application.ApplicationService/RentFinancingRequestApplication", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationServiceClient) GetUserRentApplication(ctx context.Context, in *GetUserRentApplicationRequest, opts ...grpc.CallOption) (*GetUserRentApplicationResponse, error) {
	out := new(GetUserRentApplicationResponse)
	err := c.cc.Invoke(ctx, "/application.ApplicationService/GetUserRentApplication", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationServiceClient) GetAllUserRentApplications(ctx context.Context, in *GetAllUserRentApplicationsRequest, opts ...grpc.CallOption) (*GetAllUserRentApplicationsResponse, error) {
	out := new(GetAllUserRentApplicationsResponse)
	err := c.cc.Invoke(ctx, "/application.ApplicationService/GetAllUserRentApplications", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationServiceClient) DeclineRentApplication(ctx context.Context, in *DeclineRentApplicationRequest, opts ...grpc.CallOption) (*DeclineRentApplicationResponse, error) {
	out := new(DeclineRentApplicationResponse)
	err := c.cc.Invoke(ctx, "/application.ApplicationService/DeclineRentApplication", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationServiceClient) ApproveRentApplication(ctx context.Context, in *ApproveRentApplicationRequest, opts ...grpc.CallOption) (*ApproveRentApplicationResponse, error) {
	out := new(ApproveRentApplicationResponse)
	err := c.cc.Invoke(ctx, "/application.ApplicationService/ApproveRentApplication", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationServiceClient) DeleteRentApplication(ctx context.Context, in *DeleteRentApplicationRequest, opts ...grpc.CallOption) (*DeleteRentApplicationResponse, error) {
	out := new(DeleteRentApplicationResponse)
	err := c.cc.Invoke(ctx, "/application.ApplicationService/DeleteRentApplication", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationServiceClient) DeleteTourApplication(ctx context.Context, in *DeleteTourApplicationRequest, opts ...grpc.CallOption) (*DeleteTourApplicationResponse, error) {
	out := new(DeleteTourApplicationResponse)
	err := c.cc.Invoke(ctx, "/application.ApplicationService/DeleteTourApplication", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationServiceClient) UpdateApplicationLandlordPaymentStatus(ctx context.Context, in *UpdateApplicationLandlordPaymentStatusRequest, opts ...grpc.CallOption) (*UpdateApplicationLandlordPaymentStatusResponse, error) {
	out := new(UpdateApplicationLandlordPaymentStatusResponse)
	err := c.cc.Invoke(ctx, "/application.ApplicationService/UpdateApplicationLandlordPaymentStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationServiceClient) UpdateApplicationSecurityDepositPaidStatus(ctx context.Context, in *UpdateApplicationSecurityDepositPaidStatusRequest, opts ...grpc.CallOption) (*UpdateApplicationSecurityDepositPaidStatusResponse, error) {
	out := new(UpdateApplicationSecurityDepositPaidStatusResponse)
	err := c.cc.Invoke(ctx, "/application.ApplicationService/UpdateApplicationSecurityDepositPaidStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationServiceClient) UpdateApplicationRepaymentDetails(ctx context.Context, in *UpdateApplicationRepaymentDetailsRequest, opts ...grpc.CallOption) (*UpdateApplicationRepaymentDetailsResponse, error) {
	out := new(UpdateApplicationRepaymentDetailsResponse)
	err := c.cc.Invoke(ctx, "/application.ApplicationService/UpdateApplicationRepaymentDetails", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationServiceClient) RoomMateApplication(ctx context.Context, in *RoomMateApplicationRequest, opts ...grpc.CallOption) (*RoomMateApplicationResponse, error) {
	out := new(RoomMateApplicationResponse)
	err := c.cc.Invoke(ctx, "/application.ApplicationService/RoomMateApplication", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationServiceClient) RoomMateApplicationUpdate(ctx context.Context, in *RoomMateApplicationUpdateRequest, opts ...grpc.CallOption) (*RoomMateApplicationUpdateResponse, error) {
	out := new(RoomMateApplicationUpdateResponse)
	err := c.cc.Invoke(ctx, "/application.ApplicationService/RoomMateApplicationUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationServiceClient) ManageUserLock(ctx context.Context, in *ManageUserLockRequest, opts ...grpc.CallOption) (*ManageUserLockResponse, error) {
	out := new(ManageUserLockResponse)
	err := c.cc.Invoke(ctx, "/application.ApplicationService/ManageUserLock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationServiceClient) GetApplicationMetrics(ctx context.Context, in *GetApplicationMetricsRequest, opts ...grpc.CallOption) (*GetApplicationMetricsResponse, error) {
	out := new(GetApplicationMetricsResponse)
	err := c.cc.Invoke(ctx, "/application.ApplicationService/GetApplicationMetrics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ApplicationServiceServer is the server API for ApplicationService service.
// All implementations must embed UnimplementedApplicationServiceServer
// for forward compatibility
type ApplicationServiceServer interface {
	MakeHouseFinanceApplication(context.Context, *MakeHouseFinanceApplicationRequest) (*MakeHouseFinanceApplicationResponse, error)
	ListMakeHouseFinanceApplication(context.Context, *ListMakeHouseFinanceApplicationRequest) (*ListMakeHouseFinanceApplicationResponse, error)
	FindOneMakeHouseFinanceApplication(context.Context, *FindOneMakeHouseFinanceApplicationRequest) (*FindOneMakeHouseFinanceApplicationResponse, error)
	MakeTourRequestApplication(context.Context, *MakeTourRequestApplicationRequest) (*MakeTourRequestApplicationResponse, error)
	RentFinancingRequestApplication(context.Context, *RentFinancingRequestApplicationRequest) (*RentFinancingRequestApplicationResponse, error)
	GetUserRentApplication(context.Context, *GetUserRentApplicationRequest) (*GetUserRentApplicationResponse, error)
	GetAllUserRentApplications(context.Context, *GetAllUserRentApplicationsRequest) (*GetAllUserRentApplicationsResponse, error)
	DeclineRentApplication(context.Context, *DeclineRentApplicationRequest) (*DeclineRentApplicationResponse, error)
	ApproveRentApplication(context.Context, *ApproveRentApplicationRequest) (*ApproveRentApplicationResponse, error)
	DeleteRentApplication(context.Context, *DeleteRentApplicationRequest) (*DeleteRentApplicationResponse, error)
	DeleteTourApplication(context.Context, *DeleteTourApplicationRequest) (*DeleteTourApplicationResponse, error)
	UpdateApplicationLandlordPaymentStatus(context.Context, *UpdateApplicationLandlordPaymentStatusRequest) (*UpdateApplicationLandlordPaymentStatusResponse, error)
	UpdateApplicationSecurityDepositPaidStatus(context.Context, *UpdateApplicationSecurityDepositPaidStatusRequest) (*UpdateApplicationSecurityDepositPaidStatusResponse, error)
	UpdateApplicationRepaymentDetails(context.Context, *UpdateApplicationRepaymentDetailsRequest) (*UpdateApplicationRepaymentDetailsResponse, error)
	RoomMateApplication(context.Context, *RoomMateApplicationRequest) (*RoomMateApplicationResponse, error)
	RoomMateApplicationUpdate(context.Context, *RoomMateApplicationUpdateRequest) (*RoomMateApplicationUpdateResponse, error)
	ManageUserLock(context.Context, *ManageUserLockRequest) (*ManageUserLockResponse, error)
	GetApplicationMetrics(context.Context, *GetApplicationMetricsRequest) (*GetApplicationMetricsResponse, error)
	mustEmbedUnimplementedApplicationServiceServer()
}

// UnimplementedApplicationServiceServer must be embedded to have forward compatible implementations.
type UnimplementedApplicationServiceServer struct {
}

func (UnimplementedApplicationServiceServer) MakeHouseFinanceApplication(context.Context, *MakeHouseFinanceApplicationRequest) (*MakeHouseFinanceApplicationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MakeHouseFinanceApplication not implemented")
}
func (UnimplementedApplicationServiceServer) ListMakeHouseFinanceApplication(context.Context, *ListMakeHouseFinanceApplicationRequest) (*ListMakeHouseFinanceApplicationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMakeHouseFinanceApplication not implemented")
}
func (UnimplementedApplicationServiceServer) FindOneMakeHouseFinanceApplication(context.Context, *FindOneMakeHouseFinanceApplicationRequest) (*FindOneMakeHouseFinanceApplicationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindOneMakeHouseFinanceApplication not implemented")
}
func (UnimplementedApplicationServiceServer) MakeTourRequestApplication(context.Context, *MakeTourRequestApplicationRequest) (*MakeTourRequestApplicationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MakeTourRequestApplication not implemented")
}
func (UnimplementedApplicationServiceServer) RentFinancingRequestApplication(context.Context, *RentFinancingRequestApplicationRequest) (*RentFinancingRequestApplicationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RentFinancingRequestApplication not implemented")
}
func (UnimplementedApplicationServiceServer) GetUserRentApplication(context.Context, *GetUserRentApplicationRequest) (*GetUserRentApplicationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserRentApplication not implemented")
}
func (UnimplementedApplicationServiceServer) GetAllUserRentApplications(context.Context, *GetAllUserRentApplicationsRequest) (*GetAllUserRentApplicationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllUserRentApplications not implemented")
}
func (UnimplementedApplicationServiceServer) DeclineRentApplication(context.Context, *DeclineRentApplicationRequest) (*DeclineRentApplicationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeclineRentApplication not implemented")
}
func (UnimplementedApplicationServiceServer) ApproveRentApplication(context.Context, *ApproveRentApplicationRequest) (*ApproveRentApplicationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApproveRentApplication not implemented")
}
func (UnimplementedApplicationServiceServer) DeleteRentApplication(context.Context, *DeleteRentApplicationRequest) (*DeleteRentApplicationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRentApplication not implemented")
}
func (UnimplementedApplicationServiceServer) DeleteTourApplication(context.Context, *DeleteTourApplicationRequest) (*DeleteTourApplicationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTourApplication not implemented")
}
func (UnimplementedApplicationServiceServer) UpdateApplicationLandlordPaymentStatus(context.Context, *UpdateApplicationLandlordPaymentStatusRequest) (*UpdateApplicationLandlordPaymentStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateApplicationLandlordPaymentStatus not implemented")
}
func (UnimplementedApplicationServiceServer) UpdateApplicationSecurityDepositPaidStatus(context.Context, *UpdateApplicationSecurityDepositPaidStatusRequest) (*UpdateApplicationSecurityDepositPaidStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateApplicationSecurityDepositPaidStatus not implemented")
}
func (UnimplementedApplicationServiceServer) UpdateApplicationRepaymentDetails(context.Context, *UpdateApplicationRepaymentDetailsRequest) (*UpdateApplicationRepaymentDetailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateApplicationRepaymentDetails not implemented")
}
func (UnimplementedApplicationServiceServer) RoomMateApplication(context.Context, *RoomMateApplicationRequest) (*RoomMateApplicationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RoomMateApplication not implemented")
}
func (UnimplementedApplicationServiceServer) RoomMateApplicationUpdate(context.Context, *RoomMateApplicationUpdateRequest) (*RoomMateApplicationUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RoomMateApplicationUpdate not implemented")
}
func (UnimplementedApplicationServiceServer) ManageUserLock(context.Context, *ManageUserLockRequest) (*ManageUserLockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ManageUserLock not implemented")
}
func (UnimplementedApplicationServiceServer) GetApplicationMetrics(context.Context, *GetApplicationMetricsRequest) (*GetApplicationMetricsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetApplicationMetrics not implemented")
}
func (UnimplementedApplicationServiceServer) mustEmbedUnimplementedApplicationServiceServer() {}

// UnsafeApplicationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ApplicationServiceServer will
// result in compilation errors.
type UnsafeApplicationServiceServer interface {
	mustEmbedUnimplementedApplicationServiceServer()
}

func RegisterApplicationServiceServer(s grpc.ServiceRegistrar, srv ApplicationServiceServer) {
	s.RegisterService(&ApplicationService_ServiceDesc, srv)
}

func _ApplicationService_MakeHouseFinanceApplication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MakeHouseFinanceApplicationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationServiceServer).MakeHouseFinanceApplication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/application.ApplicationService/MakeHouseFinanceApplication",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationServiceServer).MakeHouseFinanceApplication(ctx, req.(*MakeHouseFinanceApplicationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationService_ListMakeHouseFinanceApplication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMakeHouseFinanceApplicationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationServiceServer).ListMakeHouseFinanceApplication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/application.ApplicationService/ListMakeHouseFinanceApplication",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationServiceServer).ListMakeHouseFinanceApplication(ctx, req.(*ListMakeHouseFinanceApplicationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationService_FindOneMakeHouseFinanceApplication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindOneMakeHouseFinanceApplicationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationServiceServer).FindOneMakeHouseFinanceApplication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/application.ApplicationService/FindOneMakeHouseFinanceApplication",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationServiceServer).FindOneMakeHouseFinanceApplication(ctx, req.(*FindOneMakeHouseFinanceApplicationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationService_MakeTourRequestApplication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MakeTourRequestApplicationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationServiceServer).MakeTourRequestApplication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/application.ApplicationService/MakeTourRequestApplication",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationServiceServer).MakeTourRequestApplication(ctx, req.(*MakeTourRequestApplicationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationService_RentFinancingRequestApplication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RentFinancingRequestApplicationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationServiceServer).RentFinancingRequestApplication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/application.ApplicationService/RentFinancingRequestApplication",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationServiceServer).RentFinancingRequestApplication(ctx, req.(*RentFinancingRequestApplicationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationService_GetUserRentApplication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserRentApplicationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationServiceServer).GetUserRentApplication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/application.ApplicationService/GetUserRentApplication",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationServiceServer).GetUserRentApplication(ctx, req.(*GetUserRentApplicationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationService_GetAllUserRentApplications_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllUserRentApplicationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationServiceServer).GetAllUserRentApplications(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/application.ApplicationService/GetAllUserRentApplications",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationServiceServer).GetAllUserRentApplications(ctx, req.(*GetAllUserRentApplicationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationService_DeclineRentApplication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeclineRentApplicationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationServiceServer).DeclineRentApplication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/application.ApplicationService/DeclineRentApplication",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationServiceServer).DeclineRentApplication(ctx, req.(*DeclineRentApplicationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationService_ApproveRentApplication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApproveRentApplicationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationServiceServer).ApproveRentApplication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/application.ApplicationService/ApproveRentApplication",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationServiceServer).ApproveRentApplication(ctx, req.(*ApproveRentApplicationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationService_DeleteRentApplication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRentApplicationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationServiceServer).DeleteRentApplication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/application.ApplicationService/DeleteRentApplication",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationServiceServer).DeleteRentApplication(ctx, req.(*DeleteRentApplicationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationService_DeleteTourApplication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTourApplicationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationServiceServer).DeleteTourApplication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/application.ApplicationService/DeleteTourApplication",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationServiceServer).DeleteTourApplication(ctx, req.(*DeleteTourApplicationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationService_UpdateApplicationLandlordPaymentStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateApplicationLandlordPaymentStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationServiceServer).UpdateApplicationLandlordPaymentStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/application.ApplicationService/UpdateApplicationLandlordPaymentStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationServiceServer).UpdateApplicationLandlordPaymentStatus(ctx, req.(*UpdateApplicationLandlordPaymentStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationService_UpdateApplicationSecurityDepositPaidStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateApplicationSecurityDepositPaidStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationServiceServer).UpdateApplicationSecurityDepositPaidStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/application.ApplicationService/UpdateApplicationSecurityDepositPaidStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationServiceServer).UpdateApplicationSecurityDepositPaidStatus(ctx, req.(*UpdateApplicationSecurityDepositPaidStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationService_UpdateApplicationRepaymentDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateApplicationRepaymentDetailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationServiceServer).UpdateApplicationRepaymentDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/application.ApplicationService/UpdateApplicationRepaymentDetails",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationServiceServer).UpdateApplicationRepaymentDetails(ctx, req.(*UpdateApplicationRepaymentDetailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationService_RoomMateApplication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoomMateApplicationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationServiceServer).RoomMateApplication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/application.ApplicationService/RoomMateApplication",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationServiceServer).RoomMateApplication(ctx, req.(*RoomMateApplicationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationService_RoomMateApplicationUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoomMateApplicationUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationServiceServer).RoomMateApplicationUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/application.ApplicationService/RoomMateApplicationUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationServiceServer).RoomMateApplicationUpdate(ctx, req.(*RoomMateApplicationUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationService_ManageUserLock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ManageUserLockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationServiceServer).ManageUserLock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/application.ApplicationService/ManageUserLock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationServiceServer).ManageUserLock(ctx, req.(*ManageUserLockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationService_GetApplicationMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetApplicationMetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationServiceServer).GetApplicationMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/application.ApplicationService/GetApplicationMetrics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationServiceServer).GetApplicationMetrics(ctx, req.(*GetApplicationMetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ApplicationService_ServiceDesc is the grpc.ServiceDesc for ApplicationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ApplicationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "application.ApplicationService",
	HandlerType: (*ApplicationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "MakeHouseFinanceApplication",
			Handler:    _ApplicationService_MakeHouseFinanceApplication_Handler,
		},
		{
			MethodName: "ListMakeHouseFinanceApplication",
			Handler:    _ApplicationService_ListMakeHouseFinanceApplication_Handler,
		},
		{
			MethodName: "FindOneMakeHouseFinanceApplication",
			Handler:    _ApplicationService_FindOneMakeHouseFinanceApplication_Handler,
		},
		{
			MethodName: "MakeTourRequestApplication",
			Handler:    _ApplicationService_MakeTourRequestApplication_Handler,
		},
		{
			MethodName: "RentFinancingRequestApplication",
			Handler:    _ApplicationService_RentFinancingRequestApplication_Handler,
		},
		{
			MethodName: "GetUserRentApplication",
			Handler:    _ApplicationService_GetUserRentApplication_Handler,
		},
		{
			MethodName: "GetAllUserRentApplications",
			Handler:    _ApplicationService_GetAllUserRentApplications_Handler,
		},
		{
			MethodName: "DeclineRentApplication",
			Handler:    _ApplicationService_DeclineRentApplication_Handler,
		},
		{
			MethodName: "ApproveRentApplication",
			Handler:    _ApplicationService_ApproveRentApplication_Handler,
		},
		{
			MethodName: "DeleteRentApplication",
			Handler:    _ApplicationService_DeleteRentApplication_Handler,
		},
		{
			MethodName: "DeleteTourApplication",
			Handler:    _ApplicationService_DeleteTourApplication_Handler,
		},
		{
			MethodName: "UpdateApplicationLandlordPaymentStatus",
			Handler:    _ApplicationService_UpdateApplicationLandlordPaymentStatus_Handler,
		},
		{
			MethodName: "UpdateApplicationSecurityDepositPaidStatus",
			Handler:    _ApplicationService_UpdateApplicationSecurityDepositPaidStatus_Handler,
		},
		{
			MethodName: "UpdateApplicationRepaymentDetails",
			Handler:    _ApplicationService_UpdateApplicationRepaymentDetails_Handler,
		},
		{
			MethodName: "RoomMateApplication",
			Handler:    _ApplicationService_RoomMateApplication_Handler,
		},
		{
			MethodName: "RoomMateApplicationUpdate",
			Handler:    _ApplicationService_RoomMateApplicationUpdate_Handler,
		},
		{
			MethodName: "ManageUserLock",
			Handler:    _ApplicationService_ManageUserLock_Handler,
		},
		{
			MethodName: "GetApplicationMetrics",
			Handler:    _ApplicationService_GetApplicationMetrics_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/pb/application.proto",
}
